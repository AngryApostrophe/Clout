# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build and Pack

on: 
  workflow_dispatch:
  push:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  SkipAssimp: "OFF"
  SkipGLFW: "OFF"

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    # There's probably a better way to do this, but I'm not familiar enough with github
    - name: Calculate GLFW Hash
      uses: theowenyoung/folder-hash@v3
      with:
        path: ${{github.workspace}}\src\external\glfw
      id: GLFWHash

    - name: Restore GLFW cache
      id: cache-GLFW
      uses: actions/cache@v4
      with:
        path: |
          ${{github.workspace}}\build\external\glfw\src\Release\glfw3.lib
        #Use the currently active Assimp commit folder hash as the key
        key: ${{ steps.GLFWHash.outputs.hash }}

#    - if: ${{ steps.cache-GLFW.outputs.cache-hit != 'true' }}
#      name: Configure GLFW
#      working-directory: ${{github.workspace}}\src\external\glfw
#      run: cmake CMakeLists.txt -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - if: ${{ steps.cache-GLFW.outputs.cache-hit == 'true' }}
      name: Configure GLFW
      run: echo "Restored GLFW from cahce, skipping build"
      env:
        SkipGLFW: "ON"

#    - if: ${{ steps.cache-GLFW.outputs.cache-hit != 'true' }}
#      name: Build GLFW
#      working-directory: ${{github.workspace}}\src\external\glfw
#      run: cmake --build . --config ${{env.BUILD_TYPE}}

    # There's probably a better way to do this, but I'm not familiar enough with github
    - name: Calculate Assimp Hash
      uses: theowenyoung/folder-hash@v3
      with:
        path: ${{github.workspace}}\src\external\assimp
      id: AssimpHash

    - name: Restore Assimp cache
      id: cache-assimp
      uses: actions/cache@v4
      with:
        path: |
          ${{github.workspace}}\build\external\assimp\lib\Release\assimp-vc143-mt.lib
          ${{github.workspace}}\build\external\assimp\include\assimp\config.h
        #Use the currently active Assimp commit folder hash as the key
        key: ${{ steps.AssimpHash.outputs.hash }}

#    - if: ${{ steps.cache-assimp.outputs.cache-hit != 'true' }}
#      name: Configure Assimp
#      working-directory: ${{github.workspace}}\src\external\assimp
#      run: cmake CMakeLists.txt -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - if: ${{ steps.cache-assimp.outputs.cache-hit == 'true' }}
      name: Configure Assimp
      run: echo "Restored Assimp from cahce, skipping build"
      env:
        SkipAssimp: "ON"

#    - if: ${{ steps.cache-assimp.outputs.cache-hit != 'true' }}
#      name: Build Assimp
#      working-directory: ${{github.workspace}}\src\external\assimp
#      run: cmake --build . --config ${{env.BUILD_TYPE}}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}\build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCLOUT_SKIP_ASSIMP=${{env.SkipAssimp}} -DCLOUT_SKIP_GLFW=${{env.SkipGLFW}}
      
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}\build --config ${{env.BUILD_TYPE}}

    - name: Snatch the result
      run: copy ${{github.workspace}}\build\bin\Release\*.exe  ${{github.workspace}}\bin

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: Clout-win-x64
        path: ${{github.workspace}}\bin\*

